let authwindow = {};

// Create a Stripe client
var stripe = Stripe('pk_test_f9oZhmpCiZchUL8MtnuVGefH');

// Create an instance of Elements
var elements = stripe.elements({
    fonts: [
      {
        cssSrc: 'https://fonts.googleapis.com/css?family=Roboto',
      },
    ],
    // Stripe's examples are localized to specific languages, but if
    // you wish to have Elements automatically detect your user's locale,
    // use `locale: 'auto'` instead.
    locale: window.__exampleLocale
  });

// Custom styling can be passed to options when creating an Element.
// (Note that this demo uses a wider set of styles than the guide below.)
/*
var style = {
  base: {
    color: '#32325d',
    lineHeight: '24px',
    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
    fontSmoothing: 'antialiased',
    fontSize: '16px',
    '::placeholder': {
      color: '#aab7c4'
    }
  },
  invalid: {
    color: '#fa755a',
    iconColor: '#fa755a'
  }
};
*/

var style = {
  iconStyle: 'solid',
    style: {
      base: {
        iconColor: '#c4f0ff',
        color: '#fff',
        fontWeight: 500,
        fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',
        fontSize: '15px',
        fontSmoothing: 'antialiased',

        ':-webkit-autofill': {
          color: '#fce883',
        },
        '::placeholder': {
          color: '#87BBFD',
        },
      },
      invalid: {
        iconColor: '#FFC7EE',
        color: '#FFC7EE',
      },
    },
};

// Create an instance of the card Element
var card = elements.create('card', {style: style});

// Add an instance of the card Element into the `card-element` <div>
card.mount('#card-element');

// Handle real-time validation errors from the card Element.
card.addEventListener('change', function(event) {
  var displayError = document.getElementById('card-errors');
  if (event.error) {
    displayError.textContent = event.error.message;
  } else {
    displayError.textContent = '';
  }
});

// Handle form submission
var form = document.getElementById('payment-form');
form.addEventListener('submit', function(event) {
  event.preventDefault();

  const paymentRequest = {
    card: card,
    currency: 'JPY',
    amount: 5000 * 100,
    nativeElement: document.querySelector('#iframe-payment'),
    ownerInfo: {
      owner: {
        name: 'Jhon Doe',
        email: 'jhon.doe@example.com'
      }
    }

  };

  paymentRequest.nativeElement.innerHTML = 'Loading... Please wait...';

  //authwindow = window.open("callback.html?client_secret=src_client_secret_XXXXX&livemode=false&source=src_XXXXXX", "threedsecure" );
  authwindow = window.open("waiting.html", "threedsecure" );

  doPayment(paymentRequest).then((result) => {
    console.log('result --> ', result);
    paymentRequest.nativeElement.innerHTML = 'Success!!!! Your details are correct!!! :)';
    //alert('Success: Token is: ' + result.id);
    console.log('Success: Token is: ' + result.id);
    // ここでFirebaseに格納
  }).catch((error) => {
    authwindow.close();
    console.log(error);
    paymentRequest.nativeElement.innerHTML = 'Ups! We can\t validate your details...';
    alert('Ups, something wrong, sorry! :(');
  });

});

function doPayment(paymentRequest) {
  return new Promise((resolve, reject) => {
    stripe.createSource(paymentRequest.card, paymentRequest.ownerInfo).then(function(result) {
      console.log(result)
      if (result.error) {
        // Inform the user if there was an error
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
        reject(result.error);
      } else if (result.source.card.three_d_secure === 'not_supported' && result.source.status === 'chargeable'){
        authwindow.close();
        resolve( result.source );
      } else if (result.source.card.three_d_secure === 'optional' || result.source.card.three_d_secure === 'required'){

        paymentRequest.source = result;

        createThreeDSecureSource(paymentRequest).then((result)=>{
          console.log(result);

          resolve(result);
        }).catch((error) => {
          console.log(error);
          reject(error)
        });

      } else {
        reject(result);
      }
    });
  });
}

function createThreeDSecureSource(paymentRequest){
  console.log('create3DSecure --> paymentRequest', paymentRequest);
  return new Promise((resolve, reject) => {
    stripe.createSource({
      type: 'three_d_secure',
      amount: paymentRequest.amount,
      currency: paymentRequest.currency,
      three_d_secure: {
        card: paymentRequest.source.source.id
      },
      redirect: {
        //return_url: window.location.href
        return_url: window.location.origin + "/callback.html"
      }
    }).then(function(result) {
      console.log('create3DSecure --> createSourceResponse', result);

      // handle result.error or result.source
      if (result.error) {
        // Inform the user if there was an error
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
        console.log(result.error);
        reject(result.error);
      }

      paymentRequest.threeDSecure = result;

      /*
      var iframe = document.createElement("iframe");
      paymentRequest.nativeElement.replaceChild(iframe, paymentRequest.nativeElement.childNodes.item(0));
      iframe.style.width = "100%";
      iframe.style.height = "800px";
      iframe.frameBorder = "0";
      iframe.seamless = true;
      iframe.addEventListener('load',()=>{
        retrieveSource(result.source.id, result.source.client_secret).then((result)=>{
          resolve(result);
        });
      });
      iframe.src = result.source.redirect.url;
      */

      authwindow.location.href = result.source.redirect.url;

      //ここにaddeventlistener
      receiveMessageFromAuthWindow(result).then((result2)=>{
        console.log(result2);
        resolve(result2);
      }).catch((error) => {
        console.log(error);
        reject(error)
      });

    });
  });
}

function receiveMessageFromAuthWindow(result){
  return new Promise((resolve, reject) => {
        window.addEventListener('message', (evt)=>{
          if (evt.data === "threedsecurecredentialcallback"){
            console.log(evt.data);
            console.log(authwindow.location);
            if (typeof(authwindow.close) === 'function' && authwindow.location.pathname === '/callback.html'){
              authwindow.close();
            }
            console.log(JSON.parse(localStorage.getItem("threedsecurecredential")));
            //document.querySelector("#postmessage").innerHTML = localStorage.getItem("threedsecurecredential");
            localStorage.setItem("threedsecurecredential",'{}');

            retrieveSource(result.source.id, result.source.client_secret).then((result2)=>{
              console.log(result2);
              //resolve("あいうえお");
              resolve(result2);
            }).catch((error) => {
              console.log(error);
              reject(error)
            });


          }
        });
  });

}


function retrieveSource(id, client_secret){
  return new Promise((resolve, reject) => {
    stripe.retrieveSource({
      id: id,
      client_secret: client_secret,
    }).then(function(result) {
      // Handle result.error or result.source
      if (result.error) {
        // Inform the user if there was an error
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
        console.log(result.error);
        reject(result.error);
      } else if (result.source.status === 'canceled' || result.source.status === 'consumed' || result.source.status === 'failed') {
        console.log('onPoolCallback --> REJECT --> canceled/consumed/fail --> ', result.source);
        reject(result.source.status);
      } else if (/* result.source.three_d_secure.authenticated && */ result.source.status === 'chargeable') {
        /* some cards do not need to be authenticated, like the 4242 4242 4242 4242 */
        console.log('onPoolCallback --> SUCCESS --> ', result);
        resolve(result.source);
      }
    });

  });
}
